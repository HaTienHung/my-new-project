'use client';

import { useState } from "react";
import { useDispatch, useSelector } from "react-redux";
import { toast } from "react-toastify";
import { addToCart as addToCartAction } from "@/app/lib/redux/cart-slice";
import { RootState } from "@/app/lib/redux/store";
import { openAuthModal } from "@/app/lib/redux/authModal-slice";
import Cookies from "js-cookie";
import { Product } from "@/app/lib/definitions";
import Image from 'next/image';
import { FaMinus, FaPlus } from "react-icons/fa6";
import { AiOutlineLoading3Quarters } from "react-icons/ai";



const ProductDetail = ({ product }: { product: Product }) => {
  const [quantity, setQuantity] = useState(1); // Qu·∫£n l√Ω s·ªë l∆∞·ª£ng t·∫°i component n√†y
  const isAuthenticated = useSelector((state: RootState) => state.auth.isAuthenticated);
  const [error, setError] = useState("");
  const [isloading, setIsLoading] = useState(false);

  const handleIncrease = () => {
    setQuantity(prevQuantity => prevQuantity + 1);
  };

  const handleDecrease = () => {
    setQuantity(prevQuantity => Math.max(1, prevQuantity - 1)); // Gi·ªõi h·∫°n s·ªë l∆∞·ª£ng >= 1
  };

  const dispatch = useDispatch();
  const addToCart = async () => {
    if (!isAuthenticated) return dispatch(openAuthModal())
    try {
      setIsLoading(true);
      const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/app/cart/store`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${Cookies.get('token')}`,
        },
        body: JSON.stringify({ product_id: product.id, quantity }),
      });
      const data = await res.json();

      if (!res.ok) throw new Error(data.message || "C√≥ l·ªói x·∫£y ra!");


      // console.log("API response:", data);

      // ‚úÖ G·ªçi dispatch ·ªü ƒë√¢y, SAU khi API th√†nh c√¥ng
      dispatch(addToCartAction({ product_id: product.id, quantity }));

      toast.success("Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!");
    } catch (err) {
      setError(err instanceof Error ? err.message : "C·∫≠p nh·∫≠t s·∫£n ph·∫©m th·∫•t b·∫°i!");
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <>
      <div className="container mx-auto px-4 py-10 text-primary flex flex-col md:flex-row gap-4 md:gap-10">
        {/* H√¨nh ·∫£nh s·∫£n ph·∫©m - m·ªü r·ªông t·ªëi ƒëa */}
        <div className="flex-1 rounded-lg flex justify-center items-center border-[1.5px] bg-white">
          <div className="max-w-[600px] w-full bg-white p-6 rounded-lg">
            <Image
              src={product.image_url}
              alt="Product Name"
              width={500}
              height={300}
              className="w-full h-auto rounded-lg object-cover"
            />
          </div>
        </div>

        {/* Th√¥ng tin s·∫£n ph·∫©m - ch·ªâ chi·∫øm 1/3 chi·ªÅu r·ªông */}
        <div className="w-full md:w-1/3">
          <h1 className="text-2xl sm:text-3xl md:text-2xl lg:text-3xl font-bold">{product.name}</h1>
          <p className="text-lg sm:text-xl md:text-2xl font-extralight mt-4">
            {Number(product.price).toLocaleString()} VNƒê
          </p>
          <p className="text-primary text-sm mt-2">Ph√≠ v·∫≠n chuy·ªÉn s·∫Ω ƒë∆∞·ª£c t√≠nh khi ƒë·∫∑t h√†ng!</p>

          {/* S·ªë l∆∞·ª£ng */}
          <div className="flex items-center mt-6">
            <span className="mr-4 font-medium">Quantity</span>
            <div className="flex items-center border border-solid border-[rgb(121,100,73)] rounded-lg px-3 py-1 gap-2 justify-center">
              <button
                className="text-primary hover:bg-gray-200 p-2 rounded-md "
                onClick={handleDecrease}
              >
                <FaMinus className="text-sm hover:bg-gray-200" />
              </button>
              <span className="px-3 font-medium flex justify-center w-[24px]">
                {quantity}
              </span>
              <button
                className={`text-primary hover:bg-gray-200 p-2 rounded-md`}
                onClick={handleIncrease}
              >
                <FaPlus className="text-sm " />
              </button>
            </div>
          </div>
          {error && <p className="text-red-500 text-sm mb-2 mt-2">{error}</p>}
          {/* N√∫t mua h√†ng */}
          <button
            className="w-full mt-6 py-3 text-lg font-semibold border border-solid border-gray-400 rounded-lg transition duration-300 hover:border-[rgb(121,100,73)] flex justify-center items-center h-12"
            onClick={addToCart}
          >
            {
              isloading
                ? <AiOutlineLoading3Quarters className="animate-spin text-primary text-xl" />
                : "Add to cart"
            }
          </button>
          <button className="w-full h-12 mt-3 py-3 text-lg font-semibold bg-yellow-400 rounded-lg transition hover:bg-yellow-500"
            onClick={() => { toast.info("Xin th·ª© l·ªói , ch√∫ng t√¥i ƒëang ph√°t tri·ªÉn t√≠nh nƒÉng n√†y !") }}
          >
            Pay with <span className="font-bold">PayPal</span>
          </button>

          <p className="text-sm text-gray-500 text-center mt-4 underline cursor-pointer">
            More payment options
          </p>

          {/* N√∫t share */}
          <div className="mt-6 text-center">
            <button className="text-gray-500 hover:text-gray-900 flex items-center justify-center">
              <span className="mr-2">üîó</span> Share
            </button>
          </div>
        </div>
      </div>
      <div className="container mx-auto px-4 py-10 text-primary">
        <span className="text-3xl font-bold">M√¥ t·∫£ s·∫£n ph·∫©m</span>
        <div
          className="whitespace-pre-line mt-4"
        >
          {product.description}
        </div>
      </div>
      <div className="container mx-auto px-4 py-10">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
          {/* Shipping Section */}
          <div className=" ">
            <h2 className="text-2xl font-bold text-primary mb-4">V·ªÅ V·∫≠n Chuy·ªÉn</h2>
            <p className="text-primary leading-relaxed ">
              Ch√∫ng t√¥i s·∫Ω t√≠nh ph√≠ giao h√†ng d·ª±a tr√™n khu v·ª±c b·∫°n sinh s·ªëng. Ch√∫ng t√¥i h·ª£p t√°c v·ªõi nhi·ªÅu ƒë∆°n v·ªã v·∫≠n chuy·ªÉn nh∆∞ FedEx, DHL, v.v., ƒë·ªÉ ƒë·∫£m b·∫£o ƒë∆°n h√†ng c·ªßa b·∫°n ƒë∆∞·ª£c giao m·ªôt c√°ch an to√†n v√† nhanh ch√≥ng.
            </p>
          </div>

          {/* Refund or Exchange Section */}
          <div className="  ">
            <h2 className="text-2xl font-bold text-primary mb-4">Ho√†n Ti·ªÅn ho·∫∑c ƒê·ªïi Tr·∫£</h2>
            <p className="text-primary leading-relaxed ">
              Ch√∫ng t√¥i s·∫Ω ho√†n ti·ªÅn sau khi b·∫°n tr·∫£ l·∫°i s·∫£n ph·∫©m. Ph√≠ v·∫≠n chuy·ªÉn tr·∫£ h√†ng s·∫Ω do b·∫°n t·ª± chi tr·∫£. N·∫øu s·∫£n ph·∫©m kh√¥ng c√≥ v·∫•n ƒë·ªÅ v·ªÅ ch·∫•t l∆∞·ª£ng, ch√∫ng t√¥i khuy·∫øn kh√≠ch b·∫°n li√™n h·ªá v·ªõi ƒë·ªôi ng≈© ChƒÉm S√≥c Kh√°ch H√†ng c·ªßa ch√∫ng t√¥i tr∆∞·ªõc khi ho√†n tr·∫£.
            </p>
          </div>
        </div>
      </div>
    </>
  );
}
export default ProductDetail;